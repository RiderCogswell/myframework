{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADOA,IAAA,IAAA;ACLA,ADKA,ICLM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS,EAAT,CAAb;AAEA,ADGA,ICHI,CAAC,EAAL,CAAQ,IDGR,ICHA,EAAkB,YAAA;EAAO,ADOvB,OCP8B,CAAC,CDO/B,ECPuB,CAAY,CDOnC,CAAoB,IAApB,EAAmC,CCPZ;AACxB,CADD,GDOsB,KAAA,IAAA,GAAA,IAAA,CAAe,CAHnC;ACFF,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,YAAA;EAAO,EDGvB,KCH8B,ADG9B,CCH+B,GAAR,CAAY,CDGnC,GAAwC,EAAxC,CAEmC,CAFS,CCHrB;AAAuB,CAAhD,CDKyC;ACJzC,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,YAAA;EAAO,ADIgB,OCJT,CAAC,GAAR,CAAY,mBAAZ;AAAiC,CAA1D;AACA,EDKE,ECLE,CAAC,CDKH,CCLF,ADKE,CCLM,MAAR,EAAgB,ADKd,CAAA,GAAA,GAAA,KCLc,KDKV,QAAJ,EAAoB;ECLC,EDMnB,KCN0B,CAAC,CDMpB,ECNY,CAAY,EDMnB,ICNO,ADMZ,CAAU,QAAV,CAAP;ACNuC,CAA3C,CDOG,CAFD;ACFF,IAAI,CAAC,OAAL,CAAa,MAAb;EDIG;;EAED,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,MAAJ,EAAqB;IACnB,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAzB;EACD,CAFD;;EAEC;;EAED,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC;IACtC,IAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,KAA0B,EAA3C,CADsC,CACS;;IAC/C,QAAQ,CAAC,IAAT,CAAc,QAAd;IACA,KAAK,MAAL,CAAY,SAAZ,IAAyB,QAAzB;EACD,CAJD;;EAIC;;EAED,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAAyB;IACvB,IAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAjB;;IAEA,IAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAArC,EAAwC;MACtC;IACD;;IAED,QAAQ,CAAC,OAAT,CAAiB,UAAA,QAAA,EAAQ;MACvB,QAAQ;IACT,CAFD;EAGD,CAVD;;EAWF,OAAA,IAAA;AA/BA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["interface UserProps{\n  name?: string;\n  age?: number;\n}\n\ntype Callback = () => void // type alias\n\nexport class User {\n  // act as an eventBank for the on method\n  events: { [key: string]: Callback[] } = {}; // we use key:string when we REALLY do not know what properties will be passed\n\n  constructor(private data: UserProps) {};\n\n  get(propName: string): (number | string) {\n    return this.data[propName]\n  };\n\n  set(update: UserProps): void {\n    Object.assign(this.data, update);\n  };\n\n  on(eventName: string, callback: Callback): void {\n    const handlers = this.events[eventName] || []; // assign events OR an empty array\n    handlers.push(callback);\n    this.events[eventName] = handlers;\n  };\n\n  trigger(eventName: string): void {\n    const handlers = this.events[eventName];\n\n    if (!handlers || handlers.length === 0) {\n      return;\n    }\n\n    handlers.forEach(callback => {\n      callback();\n    })\n  }\n}","import { User } from \"./models/User\";\n\nconst user = new User({});\n\nuser.on('change', () => {console.log('change2');\n})\nuser.on('change', () => {console.log('change2')})\nuser.on('change', () => {console.log('change2jdsabojgbf')})\nuser.on('save', () => {console.log('save')})\n\n\nuser.trigger('save')"]}